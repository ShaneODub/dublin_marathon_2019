# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17718,c(4:7,9)])
myfunc2 <- function(rowx){
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17718,c(4:7,9)])
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17718,c(4:7,9)])
myfunc2(frames_df[1,c(4:7,9)])
frames_df[17718,]
length(frames_df)
str(frames_df)
View(frames_df)
frames_df[1771,]
frames_df[17718,]
saveRDS(frames_df,file = "frame_df_2.rds") # 05/11/2019 17:02
frames_df[17781,]
View[frames_df]
str(frames_df)
frames_df[1,]
frames_df[17781,]
frames_df[17,]
frames_df[177,]
frames_df[1770,]
frames_df[10000,]
frames_df[13000,]
frames_df[16000,]
frames_df[17000,]
frames_df[17500,]
frames_df[17250,]
frames_df[17375,]
frames_df[17435,]
frames_df[17475,]
frames_df[17487,]
frames_df[17481,]
frames_df[17484,]
frames_df[17483,]
frames_df[17482,]
frames_df[17481,]
frames_df[1,]
frames_df[17481,]
View(frames_df)
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17481,c(4:7,9)])
apply(frames_df[1:4,c(4:7,9)],1,function(x) myfunc2(x))
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
str(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
str(chkpt_times)
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
apply(frames_df[1:4,c(4:7,9)],1,function(x) myfunc2(x))
apply(frames_df[1,c(4:7,9)],1,function(x) myfunc2(x))
myfunc2(frames_df[1,c(4:7,9)])
myfunc2(frames_df[12111,c(4:7,9)])
apply(frames_df[1:2,c(4:7,9)],1,function(x) myfunc2(x))
tempdf <- frames_df[1:5,]
View(tempdf)
apply(tempdf,1,function(x) myfunc2(x))
apply(tempdf[,c(4:7,9)],1,function(x) myfunc2(x))
tempdf[,c(4:7,9)]
tempdf <- frames_df[1:5,c(4:7,9)]
apply(tempdf,1,function(x) myfunc2(x))
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
str(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- c(0,rowx[1:5],t_200k) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
str(chkpt_times)
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
apply(tempdf,1,function(x) myfunc2(x))
apply(frames_df[1:2,c(4:7,9)],1,function(x) myfunc2(x))
tempdf <- apply(frames_df[1:10,c(4:7,9)],1,function(x) myfunc2(x))
View(tempdf)
rm(list = ls())
readRDS(choose.files())
list.of.dataframes <- readRDS(choose.files())
View(list.of.dataframes)
library(dplyr)
all.results <- bind_rows(list.of.dataframes)
all.results <-
list.of.dataframes %>%
lapply(., mutate_if, is.integer, as.character) %>%
bind_rows()
View(all.results)
is_tibble(all.results)
library(tidyverse)
is_tibble(all.results)
# Keeping just the columns I plan to use
all.results <- select(all.results,1,4,6,10,12,16,18,20,22,21)
str(all.results.df)
str(all.results)
View(all.results)
all.results <-
list.of.dataframes %>%
lapply(., mutate_if, is.integer, as.character) %>%
bind_rows()
View(all.results)
all.results <- all.results %>%
select(.,1,4,6,10,12,16,18,20,22,21)
str(all.results)
all.results <- as.tibble(all.results)
library(tibble)
str(all.results)
all.results <- as_tibble(all.results)
str(all.results)
summarise(all.results)
getwd()
setwd("C:\Users\Shane\Projects\marathon")
setwd("C:/Users/Shane/Projects/marathon")
getwd()
glimpse(all.results)
glimpse(all.results)
View(all.results)
all.results %>%
distinct(Gender)
all.results %>%
distinct(Category)
all.results %>%
filter(., Overall.Position == DNF) %>%
View()
all.results %>%
filter(., Overall.Position == "DNF") %>%
View()
all.results %>%
filter(., Overall.Position != "DNF") %>%
View()
all.results %>%
filter(., Overall.Position == "DNF") %>%
View()
all.results %>%
filter(., Overall.Position != "DNF") %>%
View()
summary(all.results)
all.results %>%
filter(Overall.Position == "DNF") %>%
View()
all.results$Chip.Time %>%
filter(is.na(Chip.Time)) %>%
View()
all.results$Chip.Time %>%
filter(Chip.Time == "") %>%
View()
all.results %>%
filter(Chip.Time == "") %>%
View()
all.results$Chip.Time %>%
filter(Chip.Time == "") %>%
View()
# There are no blanks in the Gun.Time, so will use these to fill in the blanks in the Chip.Time
View(filter(all.results,Chip.Time == "")$Chip.Time)
# There are no blanks in the Gun.Time, so will use these to fill in the blanks in the Chip.Time
View(filter(all.results,Chip.Time == ""))
# There are no blanks in the Gun.Time, so will use these to fill in the blanks in the Chip.Time
filter(all.results$Chip.Time,Chip.Time == "")
all.results$Chip.Time[all.results$Chip.Time == ""]
all.results$Gun.Time[all.results$Chip.Time == ""]
all.results$Chip.Time[all.results$Chip.Time == ""] <-
all.results$Gun.Time[all.results$Chip.Time == ""]
View(all.results)
str(all.results)
all.results <-
list.of.dataframes %>%
lapply(., mutate_if, is.integer, as.character) %>%
bind_rows()
all.results <- all.results %>%
select(.,1,4,6,10,12,16,18,20,22,21)
glimpse(all.results)
View(all.results)
all.results %>%
select(4:9) %>%
View()
all.results %>%
select(4:9) %>%
as.POSIXct()
all.results %>%
select(4:9) %>%
apply(2,as.POSIXct) %>%
View()
all.results %>%
select(4:9) %>%
apply(2,as.POSIXct, format = "%Y:%M:%S") %>%
View()
library(lubridate)
install.packages(hms)
install.packages("hms")
install.packages("hms")
library(hms)
as.hms(all.results[1,4])
as_hms(all.results[1,4])
class(as_hms(all.results[1,4]))
as_hms(all.results[1,7])/as_hms(all.results[1,4])
as_hms(all.results[1,7]) - as_hms(all.results[1,4])
minute(as_hms(all.results[1,7]) - as_hms(all.results[1,4]))
as.minute(as_hms(all.results[1,7]) - as_hms(all.results[1,4]))
(as_hms(all.results[1,7]) - as_hms(all.results[1,4]))/60
(as_hms(all.results[1,5]) - as_hms(all.results[1,4]))/60
glimpse(all.results)
glimpse(all.results)
library(dplyr)
library(tidyverse)
library(tibble)
library(lubridate)
glimpse(all.results)
install.packages("convert")
library(convert)
# Remove the gender info from category, and tidy it a bit.
all.results.df$Category <- gsub("F","", all.results.df$Category)
all.results.df$Category <- gsub("M","", all.results.df$Category)
all.results.df$Category <- gsub("U19","18", all.results.df$Category)
all.results.df$Category <- gsub("S","20", all.results.df$Category)
with(all.results$Category,
gsub("F","")
)
with(all.results,
gsub("F","", Category)
)
with(all.results,
gsub("F","", Category),
gsub("M","", Category),
gsub("U19","18", Category),
gsub("S","20", Category))
within(all.results,
gsub("F","", Category),
gsub("M","", Category),
gsub("U19","18", Category),
gsub("S","20", Category))
distinct(all.results$Category)
all.results %>% distinct(Category)
all.results %>%
.$Category %>% View()
all.results %>%
.$Category %>%
str_remove("[MFU]")
all.results %>% distinct(Category)
all.results %>%
.$Category %>%
str_remove("[MFU]") %>%
str_replace("S","20") %>%
str_replace("19","18") %>%
distinct()
all.results %>%
.$Category %>%
str_remove("[MFU]") %>%
str_replace("S","20") %>%
str_replace("19","18") %>%
unique()
all.results %>%
.$Category %>%
str_remove("[MF]") %>%
str_remove("[U]") %>%
str_replace("S","20") %>%
str_replace("19","18") %>%
unique()
all.results %>%
.$Category %>%
str_remove("[MF]") %>%
str_remove("[U]") %>%
str_replace("S","20") %>%
str_replace("19","18")
all.results$Category %>%
str_remove("[MF]") %>%
str_remove("[U]") %>%
str_replace("S","20") %>%
str_replace("19","18")
all.results$Category <-
all.results$Category %>%
str_remove("[MF]") %>%
str_remove("[U]") %>%
str_replace("19","18") %>%
str_replace("S","20") %>%
as.numeric()
glimpse(all.results)
glimpse(within(all.results,
mutate(Gender = as.factor(Gender)),
mutate(X10K = as.POSIXct(X10K)),
mutate(X20K = as.POSIXct(X20K)),
mutate(X30K = as.POSIXct(X30K)),
mutate(X40K = as.POSIXct(X40K)),
mutate(Gun.Time = as.POSIXct(Gun.Time)),
mutate(Chip.Time = as.POSIXct(Chip.Time)),
))
within(all.results,
mutate(Gender = as.factor(Gender)),
mutate(X10K = as.POSIXct(X10K)),
mutate(X20K = as.POSIXct(X20K)),
mutate(X30K = as.POSIXct(X30K)),
mutate(X40K = as.POSIXct(X40K)),
mutate(Gun.Time = as.POSIXct(Gun.Time)),
mutate(Chip.Time = as.POSIXct(Chip.Time)),
)
within(all.results,{
mutate(Gender = as.factor(Gender))
mutate(X10K = as.POSIXct(X10K))
mutate(X20K = as.POSIXct(X20K))
mutate(X30K = as.POSIXct(X30K))
mutate(X40K = as.POSIXct(X40K))
mutate(Gun.Time = as.POSIXct(Gun.Time))
mutate(Chip.Time = as.POSIXct(Chip.Time))
})
all.results %>%
mutate(Gender = as.factor(Gender)) %>%
mutate(X10K = as.POSIXct(X10K))
all.results %>%
mutate(Gender = as.factor(Gender)) %>%
mutate(X10K = as.POSIXct(X10K), format = "%H:%M:%S")
all.results %>%
mutate(Gender = as.factor(Gender)) %>%
mutate(X10K = as.POSIXct(X10K, format = "%H:%M:%S"))
all.results %>%
mutate(Gender = as.factor(Gender)) %>%
mutate(X10K = as_hms(X10K, format = "%H:%M:%S"))
all.results %>%
mutate(Gender = as.factor(Gender)) %>%
mutate(X10K = as_hms(X10K))
(as_hms(all.results[1,5]) - as_hms(all.results[1,4]))/60
glimpse(all.results)
lapply(all.results[,4:9], mutate, as_hms)
select(all.results,1,2)
glimpse(all.results)
all.results[,4:9] %>%
lapply(., mutate_if, is.character, as_hms)
lapply(all.results.df[,4:9], as_hms)
lapply(all.results[,4:9], as_hms)
str(lapply(all.results[,4:9], as_hms))
all.results.df[,4:9] <- lapply(all.results[,4:9], as_hms)
glimpse(all.results)
all.results[,4:9] <- lapply(all.results[,4:9], as_hms)
glimpse(all.results)
# Gender as category
all.results$Gender <- as.factor(all.results$Gender)
glimpse(all.results)
summarise(all.results)
summary(all.results)
glimpse(all.results)
all.results %>% filter(is.na(X10K)) %>% View()
filter(all.results, !is.na(all.results$X10K)) %>% View()
# Let's start with the 10k checkpoint times
all.results %>% filter(is.na(X10K)) %>% View()
