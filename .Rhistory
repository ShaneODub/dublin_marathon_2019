myfunc2(frames_df[1,c(4:7,9)],c(15,30,45,60,75,90,105,120,135,150,165,180,510))
myfunc2(frames_df[42,c(4:7,9)],c(15,30,45,60,75,90,105,120,135,150,165,180,510))
apply(frames_df[1:5,c(4:7,9)],1,function(rowx, time_intervals) myfunc2()))
seq(15,510,by = 15)
myfunc2 <- function(rowx){
time_intervals <- seq(15,510,by = 15)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
# print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
# print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[42,c(4:7,9)])
myfunc2(frames_df[17718,c(4:7,9)])
myfunc2 <- function(rowx){
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
# print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17718,c(4:7,9)])
myfunc2 <- function(rowx){
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17718,c(4:7,9)])
myfunc2 <- function(rowx){
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17718,c(4:7,9)])
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17718,c(4:7,9)])
myfunc2(frames_df[1,c(4:7,9)])
frames_df[17718,]
length(frames_df)
str(frames_df)
View(frames_df)
frames_df[1771,]
frames_df[17718,]
saveRDS(frames_df,file = "frame_df_2.rds") # 05/11/2019 17:02
frames_df[17781,]
View[frames_df]
str(frames_df)
frames_df[1,]
frames_df[17781,]
frames_df[17,]
frames_df[177,]
frames_df[1770,]
frames_df[10000,]
frames_df[13000,]
frames_df[16000,]
frames_df[17000,]
frames_df[17500,]
frames_df[17250,]
frames_df[17375,]
frames_df[17435,]
frames_df[17475,]
frames_df[17487,]
frames_df[17481,]
frames_df[17484,]
frames_df[17483,]
frames_df[17482,]
frames_df[17481,]
frames_df[1,]
frames_df[17481,]
View(frames_df)
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17481,c(4:7,9)])
apply(frames_df[1:4,c(4:7,9)],1,function(x) myfunc2(x))
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
str(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
str(chkpt_times)
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
apply(frames_df[1:4,c(4:7,9)],1,function(x) myfunc2(x))
apply(frames_df[1,c(4:7,9)],1,function(x) myfunc2(x))
myfunc2(frames_df[1,c(4:7,9)])
myfunc2(frames_df[12111,c(4:7,9)])
apply(frames_df[1:2,c(4:7,9)],1,function(x) myfunc2(x))
tempdf <- frames_df[1:5,]
View(tempdf)
apply(tempdf,1,function(x) myfunc2(x))
apply(tempdf[,c(4:7,9)],1,function(x) myfunc2(x))
tempdf[,c(4:7,9)]
tempdf <- frames_df[1:5,c(4:7,9)]
apply(tempdf,1,function(x) myfunc2(x))
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
str(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- c(0,rowx[1:5],t_200k) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
str(chkpt_times)
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
apply(tempdf,1,function(x) myfunc2(x))
apply(frames_df[1:2,c(4:7,9)],1,function(x) myfunc2(x))
tempdf <- apply(frames_df[1:10,c(4:7,9)],1,function(x) myfunc2(x))
View(tempdf)
# Let's start with the 10k checkpoint times
all.results %>% filter(is.na(X10K)) %>% View()
library(magrittr)
# Let's start with the 10k checkpoint times
all.results %>% filter(is.na(X10K)) %>% View()
View(list.of.dataframes)
load("C:/Users/Shane/projects/marathon/.RData")
rm(list = ls())
load("C:/Users/Shane/projects/marathon/.RData")
all.results <-
list.of.dataframes %>%
lapply(., mutate_if, is.integer, as.character) %>%
bind_rows()
library(dplyr)
library(tidyverse)
library(tibble)
library(magrittr)
library(lubridate)
library(hms)
all.results <-
list.of.dataframes %>%
lapply(., mutate_if, is.integer, as.character) %>%
bind_rows()
View(all.results)
# Keeping just the columns I plan to use
all.results <- select(all.results,1,4,6,10,12,16,18,20,22,21)
all.results <- as_tibble(all.results)
glimpse(all.results)
View(all.results)
all.results %>% distinct(Category)
all.results %>% distinct(Category)
all.results %>% unique(Category)
unique(all.results$Category)
all.results$Category <-
all.results$Category %>%
str_remove("[MF]") %>%
str_remove("[U]") %>%
str_replace("19","18") %>%
str_replace("S","20") %>%
as.numeric()
unique(all.results$Category)
# Change all the time columns to hms. It will NA the blanks at the same time.
all.results[,4:9] <- lapply(all.results[,4:9], as_hms)
# Gender column as category
all.results$Gender <- as.factor(all.results$Gender)
glimpse(all.results)
summary(data.frame(all.results))
# Let's start with the 10k checkpoint times
all.results %>% filter(is.na(X10K)) %>% View()
count_na <- function(x) sum(is.na(x))
mutate(all.results,count_na = apply(., 1, count_na))
mutate(all.results,count_na = apply(all.results, 1, count_na))
count_na <- function(x) sum(is.na(x[4:7]))
mutate(all.results[17903:17906,],count_na = apply(all.results[17903:17906,], 1, count_na))
all.results %>%
mutate(count_na = apply(., 1, count_na))
all.results <-
all.results %>%
mutate(count_na = apply(., 1, count_na))
# Let's start with the 10k checkpoint times
all.results %>% filter(is.na(X10K)) %>% View()
all.results %>%
filter(is.na(X10K) & (count_na == 2 | count_na == 3))
all.results %>%
filter(is.na(X10K) & (count_na %in% c(2,3)))
all.results %>%
filter(is.na(X10K) & (count_na %in% c(2,3))) %>% View()
all.results %>%
filter(is.na(X10K) & (count_na == 2|3))
View(all.results)
all.results %>%
filter(!is.na(X10K) & (count_na %in% c(2,3)))
all.results %>%
filter(!(is.na(X10K) & (count_na %in% c(2,3))))
all.results <-
all.results %>%
filter(!(is.na(X10K) & (count_na %in% c(2,3))))
all.results %>%
filter(is.na(X10K) & (count_na %in% c(2,3))) %>%
View()
all.results %>%
filter(count_na %in% c(2,3)) %>%
View()
all.results <-
list.of.dataframes %>%
lapply(., mutate_if, is.integer, as.character) %>%
bind_rows()
View(all.results)
# Keeping just the columns I plan to use
all.results <- select(all.results,1,4,6,10,12,16,18,20,22,21)
all.results <- as_tibble(all.results)
glimpse(all.results)
View(all.results)
unique(all.results$Category)
# Remove the gender info from category, and tidy it a bit.
all.results$Category <-
all.results$Category %>%
str_remove("[MF]") %>%
str_remove("[U]") %>%
str_replace("19","18") %>%
str_replace("S","20") %>%
as.numeric()
# Change all the time columns to hms. It will NA the blanks at the same time.
all.results[,4:9] <- lapply(all.results[,4:9], as_hms)
# Gender column as category
all.results$Gender <- as.factor(all.results$Gender)
### Missing values
# There are no missing values for Race.Number, Gender, or Category(i.e. age bracket)
# Let's start with the 10k checkpoint times
all.results %>% filter(is.na(X10K)) %>% View()
# When deciding what to do with runners who have missing times, I'm going to take
# into account how many other times are missing.
count_na <- function(x) sum(is.na(x[4:7]))
all.results <-
all.results %>%
mutate(count_na = apply(., 1, count_na))
all.results %>%
filter(count_na %in% c(2,3)) %>%
View()
all.results %>%
filter(is.na(X10K) & count_na %in% c(2,3)) %>%
View()
all.results %>%
filter(!(is.na(X10K) & (count_na %in% c(2,3))))
all.results <-
all.results %>%
filter(!(is.na(X10K) & (count_na %in% c(2,3))))
all.results %>%
filter(is.na(X20K) & (count_na %in% c(1,2))) %>% View()
all.results %>%
filter(is.na(X20K) & (count_na == 1)) %>% View()
all.results %>%
filter(is.na(X20K) & (count_na == 2)) %>% View()
all.results <-
all.results %>%
filter(!
(is.na(X20K) & (count_na == 2))
)
all.results %>%
filter(is.na(X20K) & (count_na == 2)) %>%
View()
all.results %>%
filter(is.na(X30K) & (count_na == 2)) %>%
View()
all.results %>%
filter(is.na(X30K) & is.na(X40K)) %>%
View()
all.results %>%
filter(is.na(X30K) & (count_na == 2)) %>%
View()
all.results %>%
filter(is.na(X30K) & (count_na == 2) & Overall.Position != "DNF") %>%
View()
all.results %>%
filter(!
(is.na(X30K) & (count_na == 2) & Overall.Position != "DNF")
)
all.results <-
all.results %>%
filter(!
(is.na(X30K) & (count_na == 2) & Overall.Position != "DNF")
)
all.results %>%
filter(is.na(X40K)) %>%
View()
all.results %>%
filter(!is.na(Gun.Time) & (count_na >= 2)) %>%
View()
all.results %>%
filter(!
(!is.na(Gun.Time) & (count_na >= 2))
)
all.results <-
all.results %>%
filter(!
(!is.na(Gun.Time) & (count_na >= 2))
)
getwd()
setwd("C:/Users/Shane/Projects/marathon")
getwd()
