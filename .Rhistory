# Gun.Time contains only times, and 'DNF'. No empty or NA cells.
#
# All columns are currently character type.
glimpse(results)
# Observations: 17,931
# Variables: 11
# $ Race.Number      <chr> "14", "25", "3", "1", "8", "24", "5", "28", "65", "20", "21", "26"...
# $ Gender           <chr> "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "M...
# $ Category         <chr> "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", ...
# $ X10K             <chr> "00:31:54", "00:31:53", "00:31:53", "00:31:54", "00:31:54", "00:31...
# $ X20K             <chr> "01:01:53", "01:03:30", "01:01:53", "01:01:52", "01:01:53", "01:03...
# $ Halfway          <chr> "01:05:06", "01:06:44", "01:05:07", "01:05:06", "01:05:05", "01:06...
# $ X30K             <chr> "01:32:31", "01:35:00", "01:32:31", "01:33:17", "01:33:55", "01:34...
# $ X40K             <chr> "02:01:42", "02:05:18", "02:04:49", "02:05:41", "02:05:52", "02:06...
# $ Gun.Time         <chr> "02:08:06", "02:12:01", "02:12:05", "02:13:02", "02:13:11", "02:13...
# $ Chip.Time        <chr> "02:08:06", "02:12:01", "02:12:04", "02:13:01", "02:13:10", "02:13...
# $ Overall.Position <chr> "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13...
# Let's turn the data into long/tidy format before doing anything else.
results <-
results %>%
pivot_longer(cols = c("X10K","X20K","Halfway","X30K","X40K","Gun.Time","Chip.Time"),
names_to = "Distance",
values_to = "Time")
glimpse(results)
# Observations: 125,517
# Variables: 6
# $ Race.Number      <chr> "14", "14", "14", "14", "14", "14", "14", "2...
# $ Gender           <chr> "Male", "Male", "Male", "Male", "Male", "Mal...
# $ Category         <chr> "MS", "MS", "MS", "MS", "MS", "MS", "MS", "M...
# $ Overall.Position <chr> "1", "1", "1", "1", "1", "1", "1", "2", "2",...
# $ Distance         <chr> "X10K", "X20K", "Halfway", "X30K", "X40K", "...
# $ Time             <chr> "00:31:54", "01:01:53", "01:05:06", "01:32:3...
## Cleaning
## 1. Need to split a couple of columns
## 2. Need appropriate data types for each column
## 3. Deal with missing values
# 'Category' column contains Gender info and Age info. We already have a Gender column.
unique(results$Category)
# [1] "MS"   "M45"  "M35"  "M40"  "FS"   "M50"  "F35"  "F40"  "M65"  "F45"  "M55"
# [12] "M60"  "MU19" "F50"  "F55"  "F60"  "F65"  "M70"  "FU19" "M75"  "F75"  "F70"
# [23] "M80"
results$Category <-
results$Category %>%
str_remove("[MF]") %>%               # Remove all the M for Male and F for Female.
str_replace("U19","18") %>%          # Change U19 (under 19) to 18.
str_replace("S","20")                # Change S (senior) to 20.
# Give the 'Category' column a more meaningful name, 'Age.Bracket'
results <-
results %>%
rename(Age.Bracket = Category)
unique(results$Age.Bracket)
#  [1] "20" "45" "35" "40" "50" "65" "55" "60" "18" "70" "75" "80"
# The Overall.Position column contains finishing place and a 'DNF' for those who didn't finish.
# Creating a logical column with TRUE or FALSE to indicate whether the runner finished.
results <-
results %>%
mutate(Finisher = (Overall.Position != "DNF")) %>%
select(1,2,3,4,7,5,6)          # Placing the new 7th column at the 5th position.
# The distance variable contains the old column names from the original wide format.
# We can make them more meaningful.
results$Distance <-
results$Distance %>%
str_remove_all("[XK]") %>%                  # X10K, X20K, X30K, X40K becomes 10,20,30,40
str_replace("Halfway","21.1") %>%           # The halfway point is at 21.1 kilometers.
str_replace("Chip.Time","42.2")             # The finish line is 42.2 kilometers
unique(results$Distance)
# [1] "10"       "20"       "21.1"     "30"       "40"       "Gun.Time" "42.2"
# We're going to use Gun.Time to fill in some of the blanks in the Time column
# where Distance = 42.2 (formerly 'Chip.Time').
# Now to assign an appropriate type to each variable. This will coerce some of the
# invalid entries to 'NA'.
#
# Race.Number (in theory) is based on predicted time when signing up for the race, so
# choosing as.numeric() for this rather than factor or character.
results <-
results %>%
mutate(Race.Number = as.numeric(Race.Number),
Gender = as.factor(Gender),
Age.Bracket = as.numeric(Age.Bracket),
Overall.Position = as.numeric(Overall.Position),
Time = as.numeric(as_hms(Time))/60)   # Times are now expressed in minutes.
# Where distance = 42.2 and time is NA, replace from Gun.Time
# which is always the previous (lagging) entry.
results <-
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 42.2,
lag(Time),
Time))
# Now getting rid of the 'Gun.Time' rows and refactoring the Distance column as numeric.
results <-
results %>%
filter(Distance != "Gun.Time") %>%
mutate(Distance = as.numeric(Distance))
glimpse(results)
# Observations: 107,586
# Variables: 7
# $ Race.Number      <dbl> 14, 14, 14, 14, 14, 14, 25, 25, 25, 25, 25, 25, 3, 3, ...
# $ Gender           <fct> Male, Male, Male, Male, Male, Male, Male, Male, Male, ...
# $ Age.Bracket      <dbl> 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20...
# $ Overall.Position <dbl> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, ...
# $ Finisher         <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, ...
# $ Distance         <dbl> 10.0, 20.0, 21.1, 30.0, 40.0, 42.2, 10.0, 20.0, 21.1, ...
# $ Time             <dbl> 31.90000, 61.88333, 65.10000, 92.51667, 121.70000, 128...
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) & Finisher) %>%
count() %>%
filter(n > 1)
# Going to join the count (n) to the results tibble
results <-
left_join(results,
results %>%
group_by(Race.Number) %>%
filter(is.na(Time)) %>%
count(),
by = "Race.Number")
results$n[is.na(results$n)] <- 0
# Showing one runner as an example:
results %>% filter(Race.Number == 19596) %>% select(5:8)
# Showing one runner as an example:
results %>% filter(Race.Number == 19596) %>% select(1,5:8)
# Showing one runner as an example:
results %>% filter(Race.Number == 19065) %>% select(1,5:8)
# Showing one runner as an example:
results %>% filter(Race.Number == 19065) %>% select(1,5:8)
results %>%
filter(n>1 & Finisher) %>%
View()
# 510 results
# Now negate the filter to remove them.
results <-
results %>%
filter(!
(n>1 & Finisher)
)
glimpse(results)
results %>%
filter(! (n>1 & Finisher) )
results %>%
filter( ! (n>1 & Finisher))
results %>%
group_by(Distance) %>%
filter(Finisher) %>%
summarise(Missing = sum(is.na(Time)))
# Lets have at all the times for the 44 runners with a missing 10K time.
results %>%
group_by(Race.Number) %>%
filter(Finisher,
any(Distance == 10 & is.na(Time))) %>%
View()
missing.times <- function (d){
return(
results %>%
group_by(Race.Number) %>%
filter(Finisher,
any(Distance == d & is.na(Time))) %>%
mutate(min.x = min(Time, na.rm = T)) %>%
arrange(min.x)
)
}
View(missing.times(10))
missing.times(10) %>%
filter(any(Distance == 20 & Time < 90)) %>%
View()
results %>%
group_by(Race.Number) %>%
filter(! Finisher &
(any(Distance == 10 & is.na(Time)) &
any(Distance == 20 & Time < 90))
)
results %>%
group_by(Race.Number) %>%
filter(! (Finisher &
any(Distance == 10 & is.na(Time)) &
any(Distance == 20 & Time < 90))
)
results <-
results %>%
group_by(Race.Number) %>%
filter(! (Finisher &
any(Distance == 10 & is.na(Time)) &
any(Distance == 20 & Time < 90))
)
View(missing.times(20))
results %>%
group_by(Race.Number) %>%
filter(! (Finisher &
any(Distance == 20 & is.na(Time)) &
any(Distance == 10 & Time < 10))
)
results %>%
group_by(Race.Number) %>%
filter(! (Finisher &
any(Distance == 20 & is.na(Time)) &
any(Distance == 10 & Time < 9))
)
results <-
results %>%
group_by(Race.Number) %>%
filter(! (Finisher &
any(Distance == 20 & is.na(Time)) &
any(Distance == 10 & Time < 9))
)
# Runners with a missing 30k time
View(missing.times(30))
results %>%
group_by(Race.Number) %>%
filter(! (Finisher &
any(Distance == 40 & is.na(Time)) &
any(Distance == 42.2 & Time > 345))
)
results <-
results %>%
group_by(Race.Number) %>%
filter(! (Finisher &
any(Distance == 40 & is.na(Time)) &
any(Distance == 42.2 & Time > 345))
)
results %>%
group_by(Distance) %>%
summarise(m = median(Time, na.rm = T))
results %>%
group_by(Distance) %>%
summarise(m = median(Time, na.rm = T)) %>% data.frame()
medians <-
results %>%
group_by(Distance) %>%
summarise(m = median(Time, na.rm = T)) %>%
data.frame() # Convertinng to df so I can see the figures after decimal point.
medians
medians <- c(m10k = 56.275,m20k = 112.5667, m21k = 118.5667, m30k = 171.5833,
m40k = 236.0667, m42k = 250.2917)
medians
ratio <- medians$m10k / medians$m20k; ratio
ratio <- medians[m10k] / medians[m20k]; ratio
ratio <- medians["m10k"] / medians["m20k"]; ratio
ratio <- (medians["m20k"] - medians["m10k"]) / (medians["m30k"] - medians["m10k"]); ratio
ratio <- (medians["m20k"] - medians["m10k"]) / (medians["m21k"] - medians["m10k"]); ratio
ratio <- (medians["m21k"] - medians["m20k"]) / (medians["m30k"] - medians["m20k"]); ratio
ratio <- (medians["m30k"] - medians["m21k"]) / (medians["m40k"] - medians["m21k"]); ratio
ratio <- (medians["m40k"] - medians["m30k"]) / (medians["m42k"] - medians["m30k"]); ratio
results %>%
group_by(Distance) %>%
summarise(m = median(Time, na.rm = T)) %>%
mutate(ratio = (m - lag(m, default = 0)))/(lead(m) - lag(m, default = 0))) %>%
data.frame() # Convertinng to df so I can see the figures after decimal point.
results %>%
group_by(Distance) %>%
summarise(m = median(Time, na.rm = T)) %>%
mutate(ratio = (m - lag(m, default = 0)) /
(lead(m) - lag(m, default = 0))) %>%
data.frame() # Convertinng to df so I can see the figures after decimal point.
results %>%
group_by(Distance) %>%
summarise(median = median(Time, na.rm = T)) %>%
mutate(ratio = (m - lag(m, default = 0)) /
(lead(m) - lag(m, default = 0))) %>%
data.frame() # Convertinng to df so I can see the figures after decimal point.
results %>%
group_by(Distance) %>%
summarise(median = median(Time, na.rm = T)) %>%
mutate(ratio = (median - lag(median, default = 0)) /
(lead(median) - lag(median, default = 0))) %>%
data.frame() # Convertinng to df so I can see the figures after decimal point.
results %>%
group_by(Distance) %>%
summarise(median = median(Time, na.rm = T)) %>%
mutate(dratio = (Distance - lag(Distance, default = 0)) /
(lead(Distance) - lag(Distance, default = 0)),
ratio = (median - lag(median, default = 0)) /
(lead(median) - lag(median, default = 0))) %>%
data.frame() # Convertinng to df so I can see the figures after decimal point.
results %>%
group_by(Distance) %>%
summarise(median = median(Time, na.rm = T)) %>%
mutate(ratio = round(
(median - lag(median, default = 0)) /
(lead(median) - lag(median, default = 0))),
2) %>%
data.frame() # C
results %>%
group_by(Distance) %>%
summarise(median = median(Time, na.rm = T)) %>%
mutate(ratio = (median - lag(median, default = 0)) /
(lead(median) - lag(median, default = 0))) %>%
data.frame() # Convert to df so I can see the figures after decimal point.
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 10 & Finisher,
0.499 * lead(Time),
Time))
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 10 & Finisher,
0.499 * lead(Time),
Time)) %>% View()
results %>%
mutate(Time = if(is.na(Time) & Distance == 10 & Finisher) {
0.499 * lead(Time)
}
) %>%
View()
results <-
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 10 & Finisher,
0.499 * lead(Time),
Time))
results <-
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 20 & Finisher,
lag(Time) + 0.904 * (lead(Time) - lag(Time)),
Time))
results <-
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 21.1 & Finisher,
lag(Time) + 0.102 * (lead(Time) - lag(Time)),
Time))
results <-
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 30 & Finisher,
lag(Time) + 0.451 * (lead(Time) - lag(Time)),
Time))
results <-
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 40 & Finisher,
lag(Time) + 0.819 * (lead(Time) - lag(Time)),
Time))
saveRDS(results, "results3.RDS") # saved at 18:58 18/11
results %>%
filter_by(Finisher) %>%
group_by(Distance) %>%
summarise(Missing = sum(is.na(Time)))
results %>%
filter(Finisher) %>%
group_by(Distance) %>%
summarise(Missing = sum(is.na(Time)))
results %>%
filter(! Finisher) %>% View()
results %>%
filter(! Finisher) %>%
select(Time) %>%
is.na() %>%
View()
results
results %>% ungroup()
results %>%
filter(! Finisher) %>%
select(Time) %>%
is.na() %>%
View()
results <- results %>% group_by(Race.Number)
results %>%
filter(! Finisher) %>%
select(Time) %>%
is.na() %>%
View()
pattern <-
list(c(T,T,T,T,T,T),c(T,T,T,T,T,F),c(T,T,T,T,F,F),c(T,T,T,F,F,F),c(T,T,F,F,F,F),
c(T,F,F,F,F,F),c(F,F,F,F,F,F))
pattern
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) %in% patternn) %>%
View()
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) %in% pattern) %>%
View()
results %>%
group_by(Race.Number)
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) == pattern) %>%
View()
pattern <-
list(c(F,F,F,F,F,F),c(F,F,F,F,F,T),c(F,F,F,F,T,T),c(F,F,F,T,T,T),c(F,F,T,T,T,T),
c(F,T,T,T,T,T),c(T,T,T,T,T,T))
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) %in% pattern) %>%
View()
results %>%
group_by(Race.Number) %>%
mutate(p = is.na(Time)) %>% View()
results %>%
group_by(Race.Number) %>%
mutate(p = is.na(Time)) %>%
filter(p %in% pattern)
results %>%
group_by(Race.Number) %>%
filter(Race.Number ==== 14) %>%
View()
results %>%
group_by(Race.Number) %>%
filter(Race.Number === 14) %>%
View()
results %>%
group_by(Race.Number) %>%
filter(Race.Number == 14) %>%
View()
results %>%
group_by(Race.Number) %>%
filter(Race.Number == 14) %>%
select(Time) %>%
is.na() %>% View()
results %>%
group_by(Race.Number) %>%
map(Time, is.na() )
results <- ungroup(results)
results %>%
map(is.na(Time))
results %>%
map(is.na(.$Time))
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) = c(F,F,F,F,T,T)) %>%
View()
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) == c(F,F,F,F,T,T)) %>%
View()
is.na(
results %>%
group_by(Race.Number)
)
is.na(
results %>%
group_by(Race.Number) %>% select(Time)
)
is.na(
results %>% select(Time)
)
results <- ungroup(results)
results %>%
group_by(Race.Number) %>%
arrange(is.na(Time))%>% View()
results %>%
group_by(Race.Number) %>%
arrange(Race.Number, is.na(Time)) %>% View()
results %>%
group_by(Race.Number) %>%
order(Race.Number, is.na(Time)) %>% View()
results %>%
group_by(Race.Number) %>%
arrange(Race.Number,Time) %>% View()
results %>%
group_by(Race.Number) %>%
arrange(Race.Number,Time) %>%
filter(any(Distance < lag(Distance, default = 0))) %>%
View()
results %>%
group_by(Race.Number) %>%
arrange(Race.Number,Time) %>%
filter(any(Distance < lag(Distance))) %>%
View()
results %>%
group_by(Race.Number) %>%
arrange(Race.Number,Time) %>%
filter(! (any(Distance < lag(Distance)))) %>%
View()
results %>%
group_by(Race.Number) %>%
arrange(Race.Number,Time) %>%
filter(! (any(Distance < lag(Distance, default = 0)))) %>%
View()
results %>%
group_by(Race.Number) %>%
arrange(Race.Number,Time) %>%
filter(! (any(Distance < lag(Distance, default = 0)))) %>%
ungroup()
results %>%
group_by(Race.Number) %>%
arrange(Race.Number,Time) %>%
filter(any(Distance < lag(Distance, default = 0))) %>%
View()
results <-
results %>%
group_by(Race.Number) %>%
arrange(Race.Number,Time) %>%
filter(! (any(Distance < lag(Distance, default = 0)))) %>%
ungroup()
results %>%
drop_na() %>%
group_by(Race.Number) %>%
summarise(max = max(Distance))
results %>%
drop_na() %>%
group_by(Race.Number, max(Distance))
results %>%
drop_na() %>%
group_by(Race.Number) %>%
filter(Distance == max(Distance)) %>%
View()
results %>%
drop_na(Time) %>%
group_by(Race.Number) %>%
filter(Distance == max(Distance)) %>%
View()
results %>%
drop_na(Time) %>%
group_by(Race.Number) %>%
filter(Distance == max(Distance)) %>%
n()
results %>%
drop_na(Time) %>%
group_by(Race.Number) %>%
filter(Distance == max(Distance)) %>%
count()
results %>%
drop_na(Time) %>%
group_by(Race.Number) %>%
filter(Distance == max(Distance)) %>%
ungroup() %>%
group_by(Distance) %>% count()
