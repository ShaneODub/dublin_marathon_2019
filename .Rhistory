print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
myfunc2(frames_df[17481,c(4:7,9)])
apply(frames_df[1:4,c(4:7,9)],1,function(x) myfunc2(x))
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
str(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- data.frame(c(0,rowx[1:5],t_200k)) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
str(chkpt_times)
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
apply(frames_df[1:4,c(4:7,9)],1,function(x) myfunc2(x))
apply(frames_df[1,c(4:7,9)],1,function(x) myfunc2(x))
myfunc2(frames_df[1,c(4:7,9)])
myfunc2(frames_df[12111,c(4:7,9)])
apply(frames_df[1:2,c(4:7,9)],1,function(x) myfunc2(x))
tempdf <- frames_df[1:5,]
View(tempdf)
apply(tempdf,1,function(x) myfunc2(x))
apply(tempdf[,c(4:7,9)],1,function(x) myfunc2(x))
tempdf[,c(4:7,9)]
tempdf <- frames_df[1:5,c(4:7,9)]
apply(tempdf,1,function(x) myfunc2(x))
myfunc2 <- function(rowx){
print("rowx") # <<<
print(rowx) # <<<
time_intervals <- seq(15,510,by = 15)
print("time intervals")
print(time_intervals)
str(time_intervals)
t_200k <- rowx[5] + (160/2.2)*(rowx[5] - rowx[4]) # A dummy time; needed later
print("t_200k") # <<<
print(t_200k) # <<<
chkpt_times <- c(0,rowx[1:5],t_200k) # Times: 0k, 10k, 20k, 30k, 40k, 42k,200k.
print("chkpt_times") # <<<
print(chkpt_times) # <<<
str(chkpt_times)
chkpt_distances <- c(0,10,20,30,40,42,200)
# print("chkpt_distances") # <<<
# print(chkpt_distances) # <<<
current_section <- findInterval(time_intervals,chkpt_times) # from 1 to  7
# print("current_section") # <<<
# print(current_section) # <<<
lower_chkpt_d <- chkpt_distances[current_section]
# print("lower_chkpt_d") # <<<
# print(lower_chkpt_d) # <<<
upper_chkpt_d <- chkpt_distances[current_section + 1]
# print("upper_chkpt_d") # <<<
# print(upper_chkpt_d) # <<<
lower_time <- chkpt_times[current_section]
# print("lower_time") # <<<
# print(lower_time) # <<<
upper_time <- chkpt_times[current_section + 1] # <<<
# print("upper_time") # <<<
# print(upper_time) # <<<
current_distance <-
lower_chkpt_d +
(upper_chkpt_d - lower_chkpt_d)*(time_intervals - lower_time)/(upper_time - lower_time)
return(current_distance)
}
apply(tempdf,1,function(x) myfunc2(x))
apply(frames_df[1:2,c(4:7,9)],1,function(x) myfunc2(x))
tempdf <- apply(frames_df[1:10,c(4:7,9)],1,function(x) myfunc2(x))
View(tempdf)
load("C:/Users/Shane/projects/marathon/.RData")
results <- readRDS("results.RDS")
setwd("C:/Users/Shane/Projects/marathon")
results <- readRDS("results.RDS")
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time)) +
geom_density() +
theme_minimal()
library(dplyr)
library(tidyr)
library(stringr)
library(hms)
library(magrittr)
library(ggplot2)
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time)) +
geom_density() +
theme_minimal()
results %>%
group_by(Gender) %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time)) +
geom_density() +
theme_minimal()
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time, col = Gender)) +
geom_density() +
theme_minimal()
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time, col = Gender)) +
geom_histogram() +
theme_minimal()
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time, col = Gender)) +
geom_bar() +
theme_minimal()
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time, col = Gender)) +
geom_histogram() +
facet_grid(~Gender)+
theme_minimal()
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time, col = Gender)) +
geom_histogram(y = -density()) +
facet_grid(~Gender)+
theme_minimal()
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time, col = Gender)) +
geom_histogram(aes(y = -density())) +
facet_grid(~Gender)+
theme_minimal()
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time, col = Gender)) +
geom_histogram() +
facet_grid(~Gender)+
theme_minimal()
results %>%
filter(Distance == 42.2) %>%
ggplot(mapping = aes(Time, col = Gender)) +
geom_histogram(binwidth = 60) +
facet_grid(~Gender)+
theme_minimal()
runtherace <-
ggplot(results, mapping = aes(Distance, Age.Bracket)) +
geom_point()
runtherace
results %>%
runtherace <-
ggplot(results, mapping = aes(Distance, Age.Bracket, col = "Gender")) +
geom_point()
runtherace
runtherace <-
ggplot(results, mapping = aes(Distance, Age.Bracket, col = Gender)) +
geom_point()
runtherace
results %>%
group_by(Age.Bracket) %>%
mutate(Age = if_else(Gender == "Male",
Age.Bracket + runif(2.5,0.3,2.2),
Age.Bracket + runif(5, 2.8,4.7))) %>%
View()
results %>%
mutate(Age = if_else(Gender == "Male",
Age.Bracket + runif(2.5,0.3,2.2),
Age.Bracket + runif(5, 2.8,4.7))) %>%
View()
glimpse(results)
results %>%
mutate(Age = if_else(Gender == "Male",
as.numeric(Age.Bracket) + runif(2.5,0.3,2.2),
as.numeric(Age.Bracket) + runif(5, 2.8,4.7))) %>%
View()
warnings
warnings
as.numeric(results$Age.Bracket)
list.of.dataframes <- readRDS("full_scrape_list_of_dataframes.rds")
results <-
list.of.dataframes %>%
lapply(., mutate_if, is.integer, as.character) %>%
bind_rows() %>%
as_tibble()
# Visual inspection
View(results)
# Keeping just the columns I plan to use
results <- select(results,1,4,6,10,12,14,16,18,20,22,21)
#
# Race.Number, Gender, Category apparently contain no missing or weird values.
#
# X10K,X20K,Halfway,X30K,X40K,Chip.Time etc. contain times at various checkpoints, but
# also some NA and blank cells, and 'DNF' for some of the non-finishers.
#
# Overall.Position contains the order of finishing, but also 'DNF' for the non-finishers.
#
# Gun.Time contains only times, and 'DNF'. No empty or NA cells.
#
# All columns are currently character type.
glimpse(results)
# Observations: 17,931
# Variables: 11
# $ Race.Number      <chr> "14", "25", "3", "1", "8", "24", "5", "28", "65", "20", "21", "26"...
# $ Gender           <chr> "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "M...
# $ Category         <chr> "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", ...
# $ X10K             <chr> "00:31:54", "00:31:53", "00:31:53", "00:31:54", "00:31:54", "00:31...
# $ X20K             <chr> "01:01:53", "01:03:30", "01:01:53", "01:01:52", "01:01:53", "01:03...
# $ Halfway          <chr> "01:05:06", "01:06:44", "01:05:07", "01:05:06", "01:05:05", "01:06...
# $ X30K             <chr> "01:32:31", "01:35:00", "01:32:31", "01:33:17", "01:33:55", "01:34...
# $ X40K             <chr> "02:01:42", "02:05:18", "02:04:49", "02:05:41", "02:05:52", "02:06...
# $ Gun.Time         <chr> "02:08:06", "02:12:01", "02:12:05", "02:13:02", "02:13:11", "02:13...
# $ Chip.Time        <chr> "02:08:06", "02:12:01", "02:12:04", "02:13:01", "02:13:10", "02:13...
# $ Overall.Position <chr> "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13...
# Let's turn the data into long/tidy format before doing anything else.
results <-
results %>%
pivot_longer(cols = c("X10K","X20K","Halfway","X30K","X40K","Gun.Time","Chip.Time"),
names_to = "Distance",
values_to = "Time")
glimpse(results)
# Observations: 125,517
# Variables: 6
# $ Race.Number      <chr> "14", "14", "14", "14", "14", "14", "14", "2...
# $ Gender           <chr> "Male", "Male", "Male", "Male", "Male", "Mal...
# $ Category         <chr> "MS", "MS", "MS", "MS", "MS", "MS", "MS", "M...
# $ Overall.Position <chr> "1", "1", "1", "1", "1", "1", "1", "2", "2",...
# $ Distance         <chr> "X10K", "X20K", "Halfway", "X30K", "X40K", "...
# $ Time             <chr> "00:31:54", "01:01:53", "01:05:06", "01:32:3...
## Cleaning
## 1. Need to split a couple of columns
## 2. Need appropriate data types for each column
## 3. Deal with missing values
# 'Category' column contains Gender info and Age info. We already have a Gender column.
unique(results$Category)
# [1] "MS"   "M45"  "M35"  "M40"  "FS"   "M50"  "F35"  "F40"  "M65"  "F45"  "M55"
# [12] "M60"  "MU19" "F50"  "F55"  "F60"  "F65"  "M70"  "FU19" "M75"  "F75"  "F70"
# [23] "M80"
results$Category <-
results$Category %>%
str_remove("[MF]") %>%               # Remove all the M for Male and F for Female.
str_replace("U19","18") %>%          # Change U19 (under 19) to 18.
str_replace("S","20")                # Change S (senior) to 20.
# Give the 'Category' column a more meaningful name, 'Age.Bracket'
results <-
results %>%
rename(Age.Bracket = Category)
unique(results$Age.Bracket)
#  [1] "20" "45" "35" "40" "50" "65" "55" "60" "18" "70" "75" "80"
# The Overall.Position column contains finishing place and a 'DNF' for those who didn't finish.
# Creating a logical column with TRUE or FALSE to indicate whether the runner finished.
results <-
results %>%
mutate(Finisher = (Overall.Position != "DNF")) %>%
select(1,2,3,4,7,5,6)          # Placing the new 7th column at the 5th position.
# The distance variable contains the old column names from the original wide format.
# We can make them more meaningful.
results$Distance <-
results$Distance %>%
str_remove_all("[XK]") %>%                  # X10K, X20K, X30K, X40K becomes 10,20,30,40
str_replace("Halfway","21.1") %>%           # The halfway point is at 21.1 kilometers.
str_replace("Chip.Time","42.2")             # The finish line is 42.2 kilometers
unique(results$Distance)
# [1] "10"       "20"       "21.1"     "30"       "40"       "Gun.Time" "42.2"
# We're going to use Gun.Time to fill in some of the blanks in the Time column
# where Distance = 42.2 (formerly 'Chip.Time').
# Now to assign an appropriate type to each variable. This will coerce some of the
# invalid entries to 'NA'.
#
# Race.Number (in theory) is based on predicted time when signing up for the race, so
# choosing as.numeric() for this rather than factor or character.
results <-
results %>%
mutate(Race.Number = as.numeric(Race.Number),
Gender = as.factor(Gender),
Age.Bracket = as.numeric(Age.Bracket),
Overall.Position = as.numeric(Overall.Position),
Time = as.numeric(as_hms(Time))/60)   # Times are now expressed in minutes.
# Where distance = 42.2 and time is NA, replace from Gun.Time
# which is always the previous (lagging) entry.
results <-
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 42.2,
lag(Time),
Time))
# Now getting rid of the 'Gun.Time' rows and refactoring the Distance column as numeric.
results <-
results %>%
filter(Distance != "Gun.Time") %>%
mutate(Distance = as.numeric(Distance))
glimpse(results)
# Observations: 107,586
# Variables: 7
# $ Race.Number      <dbl> 14, 14, 14, 14, 14, 14, 25, 25, 25, 25, 25, 25, 3, 3, ...
# $ Gender           <fct> Male, Male, Male, Male, Male, Male, Male, Male, Male, ...
# $ Age.Bracket      <fct> 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20...
# $ Overall.Position <dbl> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, ...
# $ Finisher         <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, ...
# $ Distance         <dbl> 10.0, 20.0, 21.1, 30.0, 40.0, 42.2, 10.0, 20.0, 21.1, ...
# $ Time             <dbl> 31.90000, 61.88333, 65.10000, 92.51667, 121.70000, 128...
# Other missing values from runners who finished:
results %>%
group_by(Distance) %>%
filter(is.na(Time) & Finisher) %>%
count()
# A tibble: 5 x 2
# Groups:   Distance [5]
#    Distance   n
#     <dbl>   <int>
# 1     10     100
# 2     20      75
# 3     21.1   127
# 4     30      68
# 5     40      40
# How many runners who finished are missing more than 1 checkpoint?
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) & Finisher) %>%
count() %>%
filter(n > 1)
# First, lapply to mutate_if over the list and then bind_rows
results <-
list.of.dataframes %>%
lapply(., mutate_if, is.integer, as.character) %>%
bind_rows() %>%
as_tibble()
# Visual inspection
View(results)
# Keeping just the columns I plan to use
results <- select(results,1,4,6,10,12,14,16,18,20,22,21)
#
# Race.Number, Gender, Category apparently contain no missing or weird values.
#
# X10K,X20K,Halfway,X30K,X40K,Chip.Time etc. contain times at various checkpoints, but
# also some NA and blank cells, and 'DNF' for some of the non-finishers.
#
# Overall.Position contains the order of finishing, but also 'DNF' for the non-finishers.
#
# Gun.Time contains only times, and 'DNF'. No empty or NA cells.
#
# All columns are currently character type.
glimpse(results)
# Observations: 17,931
# Variables: 11
# $ Race.Number      <chr> "14", "25", "3", "1", "8", "24", "5", "28", "65", "20", "21", "26"...
# $ Gender           <chr> "Male", "Male", "Male", "Male", "Male", "Male", "Male", "Male", "M...
# $ Category         <chr> "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", "MS", ...
# $ X10K             <chr> "00:31:54", "00:31:53", "00:31:53", "00:31:54", "00:31:54", "00:31...
# $ X20K             <chr> "01:01:53", "01:03:30", "01:01:53", "01:01:52", "01:01:53", "01:03...
# $ Halfway          <chr> "01:05:06", "01:06:44", "01:05:07", "01:05:06", "01:05:05", "01:06...
# $ X30K             <chr> "01:32:31", "01:35:00", "01:32:31", "01:33:17", "01:33:55", "01:34...
# $ X40K             <chr> "02:01:42", "02:05:18", "02:04:49", "02:05:41", "02:05:52", "02:06...
# $ Gun.Time         <chr> "02:08:06", "02:12:01", "02:12:05", "02:13:02", "02:13:11", "02:13...
# $ Chip.Time        <chr> "02:08:06", "02:12:01", "02:12:04", "02:13:01", "02:13:10", "02:13...
# $ Overall.Position <chr> "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13...
# Let's turn the data into long/tidy format before doing anything else.
results <-
results %>%
pivot_longer(cols = c("X10K","X20K","Halfway","X30K","X40K","Gun.Time","Chip.Time"),
names_to = "Distance",
values_to = "Time")
glimpse(results)
# Observations: 125,517
# Variables: 6
# $ Race.Number      <chr> "14", "14", "14", "14", "14", "14", "14", "2...
# $ Gender           <chr> "Male", "Male", "Male", "Male", "Male", "Mal...
# $ Category         <chr> "MS", "MS", "MS", "MS", "MS", "MS", "MS", "M...
# $ Overall.Position <chr> "1", "1", "1", "1", "1", "1", "1", "2", "2",...
# $ Distance         <chr> "X10K", "X20K", "Halfway", "X30K", "X40K", "...
# $ Time             <chr> "00:31:54", "01:01:53", "01:05:06", "01:32:3...
## Cleaning
## 1. Need to split a couple of columns
## 2. Need appropriate data types for each column
## 3. Deal with missing values
# 'Category' column contains Gender info and Age info. We already have a Gender column.
unique(results$Category)
# [1] "MS"   "M45"  "M35"  "M40"  "FS"   "M50"  "F35"  "F40"  "M65"  "F45"  "M55"
# [12] "M60"  "MU19" "F50"  "F55"  "F60"  "F65"  "M70"  "FU19" "M75"  "F75"  "F70"
# [23] "M80"
results$Category <-
results$Category %>%
str_remove("[MF]") %>%               # Remove all the M for Male and F for Female.
str_replace("U19","18") %>%          # Change U19 (under 19) to 18.
str_replace("S","20")                # Change S (senior) to 20.
# Give the 'Category' column a more meaningful name, 'Age.Bracket'
results <-
results %>%
rename(Age.Bracket = Category)
unique(results$Age.Bracket)
#  [1] "20" "45" "35" "40" "50" "65" "55" "60" "18" "70" "75" "80"
# The Overall.Position column contains finishing place and a 'DNF' for those who didn't finish.
# Creating a logical column with TRUE or FALSE to indicate whether the runner finished.
results <-
results %>%
mutate(Finisher = (Overall.Position != "DNF")) %>%
select(1,2,3,4,7,5,6)          # Placing the new 7th column at the 5th position.
# The distance variable contains the old column names from the original wide format.
# We can make them more meaningful.
results$Distance <-
results$Distance %>%
str_remove_all("[XK]") %>%                  # X10K, X20K, X30K, X40K becomes 10,20,30,40
str_replace("Halfway","21.1") %>%           # The halfway point is at 21.1 kilometers.
str_replace("Chip.Time","42.2")             # The finish line is 42.2 kilometers
unique(results$Distance)
# [1] "10"       "20"       "21.1"     "30"       "40"       "Gun.Time" "42.2"
# We're going to use Gun.Time to fill in some of the blanks in the Time column
# where Distance = 42.2 (formerly 'Chip.Time').
# Now to assign an appropriate type to each variable. This will coerce some of the
# invalid entries to 'NA'.
#
# Race.Number (in theory) is based on predicted time when signing up for the race, so
# choosing as.numeric() for this rather than factor or character.
results <-
results %>%
mutate(Race.Number = as.numeric(Race.Number),
Gender = as.factor(Gender),
Age.Bracket = as.numeric(Age.Bracket),
Overall.Position = as.numeric(Overall.Position),
Time = as.numeric(as_hms(Time))/60)   # Times are now expressed in minutes.
# Where distance = 42.2 and time is NA, replace from Gun.Time
# which is always the previous (lagging) entry.
results <-
results %>%
mutate(Time = if_else(is.na(Time) & Distance == 42.2,
lag(Time),
Time))
# Now getting rid of the 'Gun.Time' rows and refactoring the Distance column as numeric.
results <-
results %>%
filter(Distance != "Gun.Time") %>%
mutate(Distance = as.numeric(Distance))
glimpse(results)
# Observations: 107,586
# Variables: 7
# $ Race.Number      <dbl> 14, 14, 14, 14, 14, 14, 25, 25, 25, 25, 25, 25, 3, 3, ...
# $ Gender           <fct> Male, Male, Male, Male, Male, Male, Male, Male, Male, ...
# $ Age.Bracket      <fct> 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20...
# $ Overall.Position <dbl> 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, ...
# $ Finisher         <lgl> TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, ...
# $ Distance         <dbl> 10.0, 20.0, 21.1, 30.0, 40.0, 42.2, 10.0, 20.0, 21.1, ...
# $ Time             <dbl> 31.90000, 61.88333, 65.10000, 92.51667, 121.70000, 128...
results %>%
group_by(Distance) %>%
filter(is.na(Time) & Finisher) %>%
count()
results %>%
group_by(Race.Number) %>%
filter(is.na(Time) & Finisher) %>%
count() %>%
filter(n > 1)
left_join(results,
results %>%
group_by(Race.Number) %>%
filter(is.na(Time)) %>%
count(),
by = "Race.Number") %>% View
results %>%
group_by(Race.Number) %>%
mutate(n = count(is.na(Time))) %>% View()
results <-
left_join(results,
results %>%
group_by(Race.Number) %>%
filter(is.na(Time)) %>%
count(),
by = "Race.Number") %>% View
results$n[is.na(results$n)] <- 0
View(results)
